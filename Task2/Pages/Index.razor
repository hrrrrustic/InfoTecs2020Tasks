@page "/"
@using System.Threading
@using Task2.Data
@using Task2.Models
@using Task2.Services.Abstractions
@inject IFeedService FeedService

@if (_feeds != null && _feeds.Count != 0)
{
    <div class="container">
        @foreach (Feed feed in _feeds)
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="card mb-3">
                        <div class="card-header">
                            <a class="card-link" href="@feed.SourceLink" target="_blank">
                                <h2 class="card-title">@feed.Title</h2>
                            </a>
                        </div>
                        <div class="card-body">
                            <button type="button" class="btn btn-primary" @onclick="@(k => _collapseFeed[feed.FeedId] = !_collapseFeed[feed.FeedId])">Description @(_collapseFeed[feed.FeedId] ? "+" : "-")</button>
                            <div class="@(_collapseFeed[feed.FeedId] ? CollapseClass : NoCollapseClass) card-body">
                                @if (FeedReaderSettings.SupportFormatting)
                                {
                                    <p>@((MarkupString)feed.Description))</p>
                                }
                                else
                                {
                                    <p>@feed.Description</p>
                                }
                            </div>
                        </div>
                        <div class="card-footer text-right">
                            <p>@feed.PublicationTime</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <h3>There are an error in current sources or no sources, but you can add sources in settings!</h3>
}


@code
{
    private const string CollapseClass = "collapse";
    private const string NoCollapseClass = "";

    private Dictionary<Guid, bool> _collapseFeed;
    private List<Feed> _feeds;

    protected override void OnInitialized()
    {
        List<string> source = FeedReaderSettings.Sources.Where(k => k.Active).Select(k => k.Link).ToList();

        _feeds = FeedService.GetFeeds(source);

        if (_feeds != null)
            _collapseFeed = new Dictionary<Guid, bool>(_feeds.Select(k => new KeyValuePair<Guid, bool>(k.FeedId, true)));

        TimeSpan startTimeSpan = TimeSpan.FromSeconds(FeedReaderSettings.RefreshTime);
        TimeSpan periodTimeSpan = TimeSpan.FromSeconds(FeedReaderSettings.RefreshTime);

        Timer timer = new Timer(async e =>
        {
            _feeds = FeedService.GetFeeds(FeedReaderSettings.Sources.Where(k => k.Active).Select(k => k.Link).ToList());

            if(_feeds != null)
                _collapseFeed = new Dictionary<Guid, bool>(_feeds.Select(k => new KeyValuePair<Guid, bool>(k.FeedId, true)));

            await InvokeAsync(StateHasChanged);

        }, null, startTimeSpan, periodTimeSpan);

    }
}